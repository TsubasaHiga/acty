---
/**
 * Local Picture Component
 */
import { values } from '@const/values'
import { getImageSize } from '@utils/getImageSize'
import GetPathFromLocalPublic from '@utils/getPathFromLocalPublic'
import type { HTMLAttributes } from 'astro/types'

export type ArtDirectiveType = {
  media: string
  srcset: string[]
}

export type SrcsetType = {
  sm?: string[]
  lg?: string[]
}

export interface Props extends HTMLAttributes<'picture'> {
  src: string
  srcset: SrcsetType
  width?: number
  height?: number
  alt?: string
  lazy?: boolean
  fetchpriority?: HTMLAttributes<'img'>['fetchpriority']
}
const { src, srcset, width: srcWidth, height: srcHeight, alt = '', lazy = true, fetchpriority, ...attr } = Astro.props

// srcの画像サイズを取得
// srcWidthとsrcHeightが指定されている場合はそれを優先
const { width, height } =
  srcWidth && srcHeight ? { width: srcWidth, height: srcHeight } : await getImageSize(GetPathFromLocalPublic(src))

// srcsetをartDirectivesの形式に変換
const artDirectives: ArtDirectiveType[] = Object.entries(srcset).map(([key, srcset]) => {
  switch (key) {
    case 'sm':
      return {
        media: `(max-width: ${values.BREAKPOINT}px)`,
        srcset
      }
    case 'lg':
      return {
        media: `(min-width: ${values.BREAKPOINT + 1}px)`,
        srcset
      }
    default:
      return {
        media: '',
        srcset
      }
  }
})
---

<picture {...attr}>
  {artDirectives.map(({ media, srcset }) => <source media={media} srcset={srcset.join(', ')} />)}
  <img
    src={src}
    height={height}
    width={width}
    alt={alt}
    loading={lazy ? 'lazy' : 'eager'}
    fetchpriority={fetchpriority}
  />
</picture>
